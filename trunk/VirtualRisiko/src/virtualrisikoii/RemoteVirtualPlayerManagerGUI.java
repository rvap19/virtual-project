/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlayerManagerGUI.java
 *
 * Created on 13-mag-2011, 13.11.54
 */

package virtualrisikoii;


import virtualrisikoii.GameDialog;
import java.io.IOException;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;


import virtualrisikoii.jxta.middle.JXTAVirtualPlayerManager;
import middle.management.advertisement.GameAdvertisement;
import middle.management.advertisement.PlayerAdvertisement;
import middle.management.advertisement.RegistrationAdvertisement;
import middle.management.listener.GameListener;
import middle.management.listener.PipeListener;
import middle.management.listener.PlayerListener;
import middle.management.listener.RegistrationListener;
import remote.impl.JXTARemoteVirtualPlayerManager;


/**
 *
 * @author root
 */
public class RemoteVirtualPlayerManagerGUI extends javax.swing.JFrame implements GameListener,PlayerListener,PipeListener ,RegistrationListener  {

    
    protected GameDialog gameDialog;
    protected  JXTARemoteVirtualPlayerManager virtualPlayerManager;
    protected boolean local;
    /** Creates new form PlayerManagerGUI */
    
    

    public RemoteVirtualPlayerManagerGUI(JXTARemoteVirtualPlayerManager virtualPlayermanager) throws IOException {
      
        this.virtualPlayerManager=virtualPlayermanager;
        local=false;
        
        gameDialog=new GameDialog(this, true);
        
        gameDialog.setVisible(false);

        initComponents();
        this.virtualPlayerManager.init();
        userNameLabel.setText(this.virtualPlayerManager.getMyName());
        
       gamesList.setModel(new DefaultListModel());
       currentPlayersInGameList.setModel(new DefaultListModel());
       allPlayersList.setModel(new DefaultListModel());

    }

    public void setListeners(){
        
        virtualPlayerManager.getManager().addRegistrationListener(this);
        virtualPlayerManager.getManager().addGameListener(this);
        virtualPlayerManager.getManager().addPlayerListener(this);
        virtualPlayerManager.getManager().addPipeListener(this);
    }



    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        gamesList = new javax.swing.JList();
        registerButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentPlayersInGameList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        allPlayersList = new javax.swing.JList();
        newGameButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        unregisterButton = new javax.swing.JButton();
        deleteGameButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("player manager");

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        gamesList.setBorder(javax.swing.BorderFactory.createTitledBorder("games"));
        gamesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        gamesList.setName("gamesList"); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${games}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, gamesList);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${gameName}"));
        bindingGroup.addBinding(jListBinding);

        gamesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                gamesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(gamesList);

        registerButton.setText("register");
        registerButton.setName("registerButton"); // NOI18N
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        jButton2.setText("refresh");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        currentPlayersInGameList.setBorder(javax.swing.BorderFactory.createTitledBorder("current players"));
        currentPlayersInGameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        currentPlayersInGameList.setName("currentPlayersInGameList"); // NOI18N
        jScrollPane2.setViewportView(currentPlayersInGameList);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        allPlayersList.setBorder(javax.swing.BorderFactory.createTitledBorder("all players"));
        allPlayersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        allPlayersList.setAutoscrolls(false);
        allPlayersList.setDoubleBuffered(true);
        allPlayersList.setName("allPlayersList"); // NOI18N
        allPlayersList.setValueIsAdjusting(true);
        allPlayersList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                allPlayersListPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(allPlayersList);
        allPlayersList.getAccessibleContext().setAccessibleParent(this);

        newGameButton.setText("new game");
        newGameButton.setName("newGameButton"); // NOI18N
        newGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameButtonActionPerformed(evt);
            }
        });

        userNameLabel.setFont(new java.awt.Font("Georgia", 2, 14));
        userNameLabel.setText("####");
        userNameLabel.setName("userNameLabel"); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/virtualrisikoii/resources/sfondo.jpg"))); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 14));
        jLabel1.setText("Bentornato a Virtual Risiko,");
        jLabel1.setName("jLabel1"); // NOI18N

        unregisterButton.setText("unregister");
        unregisterButton.setName("unregisterButton"); // NOI18N
        unregisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unregisterButtonActionPerformed(evt);
            }
        });

        deleteGameButton.setText("delete game");
        deleteGameButton.setName("deleteGameButton"); // NOI18N
        deleteGameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGameButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(userNameLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(unregisterButton)
                                    .addComponent(registerButton))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newGameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteGameButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(registerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unregisterButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newGameButton)
                    .addComponent(deleteGameButton))
                .addGap(16, 16, 16))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            this.virtualPlayerManager.clear();

             DefaultListModel model=(DefaultListModel) this.currentPlayersInGameList.getModel();
             model.clear();

             model=(DefaultListModel) this.allPlayersList.getModel();
             model.clear();

             model=(DefaultListModel) this.gamesList.getModel();
             model.clear();

            Set<String> players=this.virtualPlayerManager.findPlayers();
            updateList(players, allPlayersList);
            
            
            Set<String> games=this.virtualPlayerManager.findGames();
            updateList(games, gamesList);
  
        } catch (IOException ex) {
            Logger.getLogger(RemoteVirtualPlayerManagerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void allPlayersListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_allPlayersListPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_allPlayersListPropertyChange

    private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
      String name=null;
      int maxPlayers=0;
      String mapName;
      int maxTurns;
        
        // TODO add your handling code here:
        this.gameDialog.setVisible(true);
         name = gameDialog.getGameName();
         maxPlayers = gameDialog.getMaxPlayer();
         mapName=gameDialog.getMapName();
         maxTurns=gameDialog.getMaxTurns();
         if(!gameDialog.isConfirmed()){
             return;
         }
        // this.jButton1.setEnabled(local);
        try {
             this.virtualPlayerManager.creategame(name,mapName,maxPlayers,maxTurns);   
             this.newGameButton.setEnabled(false);
        } catch (IOException ex) {
           System.out.println("impossbile creare gioco "+name);
        }

      

      
    }//GEN-LAST:event_newGameButtonActionPerformed

    private void gamesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_gamesListValueChanged
            selectList();

    }//GEN-LAST:event_gamesListValueChanged

    private void updateRegistrations(String gameID) throws IOException{
        DefaultListModel model=(DefaultListModel) this.currentPlayersInGameList.getModel();
        model.clear();
        Set<String> rA = this.virtualPlayerManager.findRegistrations(gameID);
        
        
        
        this.updateList(rA, currentPlayersInGameList);
        
    }

    protected void selectList(){
        try {
            // TODO add your handling code here:
            Object xxx=this.gamesList.getSelectedValue();
            if(xxx==null)
                return;

            this.virtualPlayerManager.clearRegistrations();

            String gameName=this.gamesList.getSelectedValue().toString();
            updateRegistrations(gameName);


        } catch (IOException ex) {
            Logger.getLogger(RemoteVirtualPlayerManagerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /*
     * registrazione alla partita
     */
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        try {
            // TODO add your handling code here:
            if (this.gamesList.getSelectedValue() == null) {
                return;
            }
            String gamaName = gamesList.getSelectedValue().toString();

            if(this.virtualPlayerManager.startCreatedGame(gamaName)){
                setVisible(false);
                return;
            }

            
            if(this.virtualPlayerManager.registerInGame(gamaName)){
                this.registerButton.setEnabled(false);
                this.setVisible(false);
                return;
            }
            
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_registerButtonActionPerformed

    private void unregisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unregisterButtonActionPerformed
        // TODO add your handling code here:
        String gameName=null;
        Object selection=this.gamesList.getSelectedValue();
        if(selection!=null){
            gameName=selection.toString();
            boolean deleted=this.virtualPlayerManager.deleteRegistrationForGame(gameName);
            if(deleted){
                this.jButton2ActionPerformed(evt);
                this.registerButton.setEnabled(true);
            }
        }
        
    }//GEN-LAST:event_unregisterButtonActionPerformed

    private void deleteGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGameButtonActionPerformed
        // TODO add your handling code here:
        String gameName=null;
        Object selection=this.gamesList.getSelectedValue();
        if(selection!=null){
            gameName=selection.toString();
            boolean deleted=this.virtualPlayerManager.deleteGame(gameName);
            if(deleted){
                this.jButton2ActionPerformed(evt);
                this.newGameButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_deleteGameButtonActionPerformed

    protected void updateList(Set<String> set,JList list){
        DefaultListModel model=(DefaultListModel) list.getModel();
        
        Iterator<String> iter=set.iterator();
        while(iter.hasNext()){
            String key=iter.next();
            model.addElement(key);
        }

    }

    protected void updateList(String s,JList list){
        DefaultListModel model=(DefaultListModel) list.getModel();
        model.addElement(s);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JList allPlayersList;
    protected javax.swing.JList currentPlayersInGameList;
    private javax.swing.JButton deleteGameButton;
    protected javax.swing.JList gamesList;
    protected javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    protected javax.swing.JButton newGameButton;
    protected javax.swing.JButton registerButton;
    private javax.swing.JButton unregisterButton;
    protected javax.swing.JLabel userNameLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    
    public void gameUpdated(GameAdvertisement adv) {
        if(!this.virtualPlayerManager.getGames().contains(adv.getGameName())){
            this.virtualPlayerManager.gameUpdated(adv);

            this.updateList(virtualPlayerManager.getGames(), gamesList);
        }
        
    }
    

    public void presenceUpdated(PlayerAdvertisement playerInfo) {
        if(!this.virtualPlayerManager.getPlayers().contains(playerInfo.getName())){
            this.virtualPlayerManager.presenceUpdated(playerInfo);
            this.updateList(virtualPlayerManager.getPlayers(), allPlayersList);
        }
        
    }

    

    public void registrationUpdated(RegistrationAdvertisement adv) {
        if(!this.virtualPlayerManager.getRegistrations().contains(adv.getPeerID())){
            this.virtualPlayerManager.registrationUpdated(adv);
            this.updateList(virtualPlayerManager.getRegistrations(), currentPlayersInGameList);
        }
    }

    public void pipeUpdated(middle.management.advertisement.PipeAdvertisement pipeInfo) {
        
        this.virtualPlayerManager.pipeUpdated(pipeInfo);
    }



    

    

    
}
