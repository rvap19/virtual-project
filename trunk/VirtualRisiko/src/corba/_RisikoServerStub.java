package corba;


/**
* corba/_RisikoServerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Corba.idl
* martedì 7 giugno 2011 20.10.13 CEST
*/

public class _RisikoServerStub extends org.omg.CORBA.portable.ObjectImpl implements corba.RisikoServer
{

  public corba.UserInfo authenticate (String usrname, String pwd)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("authenticate", true);
                $out.write_string (usrname);
                $out.write_string (pwd);
                $in = _invoke ($out);
                corba.UserInfo $result = corba.UserInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return authenticate (usrname, pwd        );
            } finally {
                _releaseReply ($in);
            }
  } // authenticate

  public corba.PartitaInfo[] getAvailableGames ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAvailableGames", true);
                $in = _invoke ($out);
                corba.PartitaInfo $result[] = corba.GamesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAvailableGames (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAvailableGames

  public corba.PartitaInfo getCurrentGame (corba.UserInfo player)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCurrentGame", true);
                corba.UserInfoHelper.write ($out, player);
                $in = _invoke ($out);
                corba.PartitaInfo $result = corba.PartitaInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getCurrentGame (player        );
            } finally {
                _releaseReply ($in);
            }
  } // getCurrentGame

  public boolean saveResult (corba.RegistrationInfo[] results)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("saveResult", true);
                corba.ResultsHelper.write ($out, results);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return saveResult (results        );
            } finally {
                _releaseReply ($in);
            }
  } // saveResult

  public corba.PartitaInfo createGame (corba.UserInfo u, short maxTurns, short maxPlayers, String name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createGame", true);
                corba.UserInfoHelper.write ($out, u);
                $out.write_ushort (maxTurns);
                $out.write_ushort (maxPlayers);
                $out.write_string (name);
                $in = _invoke ($out);
                corba.PartitaInfo $result = corba.PartitaInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createGame (u, maxTurns, maxPlayers, name        );
            } finally {
                _releaseReply ($in);
            }
  } // createGame

  public boolean signPlayer (corba.UserInfo player, corba.PartitaInfo partita)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("signPlayer", true);
                corba.UserInfoHelper.write ($out, player);
                corba.PartitaInfoHelper.write ($out, partita);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return signPlayer (player, partita        );
            } finally {
                _releaseReply ($in);
            }
  } // signPlayer

  public corba.UserInfo[] getAuthenticateUsers ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAuthenticateUsers", true);
                $in = _invoke ($out);
                corba.UserInfo $result[] = corba.PlayersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAuthenticateUsers (        );
            } finally {
                _releaseReply ($in);
            }
  } // getAuthenticateUsers

  public corba.UserInfo[] getPlayers (corba.PartitaInfo partita)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getPlayers", true);
                corba.PartitaInfoHelper.write ($out, partita);
                $in = _invoke ($out);
                corba.UserInfo $result[] = corba.PlayersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getPlayers (partita        );
            } finally {
                _releaseReply ($in);
            }
  } // getPlayers

  public void shutdown ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("shutdown", false);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                shutdown (        );
            } finally {
                _releaseReply ($in);
            }
  } // shutdown

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:corba/RisikoServer:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RisikoServerStub
