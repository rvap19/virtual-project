package corba;


/**
* corba/RisikoServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Corba.idl
* martedì 12 luglio 2011 17.24.43 CEST
*/

public abstract class RisikoServerPOA extends org.omg.PortableServer.Servant
 implements corba.RisikoServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("authenticate", new java.lang.Integer (0));
    _methods.put ("registerPlayer", new java.lang.Integer (1));
    _methods.put ("isOnline", new java.lang.Integer (2));
    _methods.put ("getAvailableGames", new java.lang.Integer (3));
    _methods.put ("deleteRegistration", new java.lang.Integer (4));
    _methods.put ("deletePartita", new java.lang.Integer (5));
    _methods.put ("changeManager", new java.lang.Integer (6));
    _methods.put ("saveResult", new java.lang.Integer (7));
    _methods.put ("createGame", new java.lang.Integer (8));
    _methods.put ("signPlayer", new java.lang.Integer (9));
    _methods.put ("getAuthenticateUsers", new java.lang.Integer (10));
    _methods.put ("getPlayers", new java.lang.Integer (11));
    _methods.put ("shutdown", new java.lang.Integer (12));
    _methods.put ("getPartitaInfo", new java.lang.Integer (13));
    _methods.put ("getActiveGame", new java.lang.Integer (14));
    _methods.put ("notifyNewManager", new java.lang.Integer (15));
    _methods.put ("createUser", new java.lang.Integer (16));
    _methods.put ("checkUsername", new java.lang.Integer (17));
    _methods.put ("activateUser", new java.lang.Integer (18));
    _methods.put ("sendEmailForPassword", new java.lang.Integer (19));
    _methods.put ("getStatistics", new java.lang.Integer (20));
    _methods.put ("getCompleteStatistics", new java.lang.Integer (21));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // corba/RisikoServer/authenticate
       {
         String username = in.read_wstring ();
         String pwd = in.read_wstring ();
         corba.Authentication $result = null;
         $result = this.authenticate (username, pwd);
         out = $rh.createReply();
         corba.AuthenticationHelper.write (out, $result);
         break;
       }

       case 1:  // corba/RisikoServer/registerPlayer
       {
         String username = in.read_wstring ();
         corba.Player player = corba.PlayerHelper.read (in);
         this.registerPlayer (username, player);
         out = $rh.createReply();
         break;
       }

       case 2:  // corba/RisikoServer/isOnline
       {
         String username = in.read_wstring ();
         boolean $result = false;
         $result = this.isOnline (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // corba/RisikoServer/getAvailableGames
       {
         corba.PartitaInfo $result[] = null;
         $result = this.getAvailableGames ();
         out = $rh.createReply();
         corba.GamesHelper.write (out, $result);
         break;
       }

       case 4:  // corba/RisikoServer/deleteRegistration
       {
         corba.PartitaInfo partita = corba.PartitaInfoHelper.read (in);
         corba.UserInfo user = corba.UserInfoHelper.read (in);
         this.deleteRegistration (partita, user);
         out = $rh.createReply();
         break;
       }

       case 5:  // corba/RisikoServer/deletePartita
       {
         corba.PartitaInfo partita = corba.PartitaInfoHelper.read (in);
         corba.UserInfo info = corba.UserInfoHelper.read (in);
         this.deletePartita (partita, info);
         out = $rh.createReply();
         break;
       }

       case 6:  // corba/RisikoServer/changeManager
       {
         corba.PartitaInfo partita = corba.PartitaInfoHelper.read (in);
         corba.UserInfo info = corba.UserInfoHelper.read (in);
         this.changeManager (partita, info);
         out = $rh.createReply();
         break;
       }

       case 7:  // corba/RisikoServer/saveResult
       {
         corba.RegistrationInfo res[] = corba.RegistrationsHelper.read (in);
         boolean $result = false;
         $result = this.saveResult (res);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // corba/RisikoServer/createGame
       {
         corba.UserInfo user = corba.UserInfoHelper.read (in);
         short maxTurn = in.read_ushort ();
         short maxPlayers = in.read_ushort ();
         String name = in.read_wstring ();
         String type = in.read_wstring ();
         corba.PartitaInfo $result = null;
         $result = this.createGame (user, maxTurn, maxPlayers, name, type);
         out = $rh.createReply();
         corba.PartitaInfoHelper.write (out, $result);
         break;
       }

       case 9:  // corba/RisikoServer/signPlayer
       {
         corba.UserInfo player = corba.UserInfoHelper.read (in);
         corba.PartitaInfo partita = corba.PartitaInfoHelper.read (in);
         boolean $result = false;
         $result = this.signPlayer (player, partita);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // corba/RisikoServer/getAuthenticateUsers
       {
         corba.UserInfo $result[] = null;
         $result = this.getAuthenticateUsers ();
         out = $rh.createReply();
         corba.UsersHelper.write (out, $result);
         break;
       }

       case 11:  // corba/RisikoServer/getPlayers
       {
         corba.PartitaInfo partita = corba.PartitaInfoHelper.read (in);
         corba.UserInfo $result[] = null;
         $result = this.getPlayers (partita);
         out = $rh.createReply();
         corba.UsersHelper.write (out, $result);
         break;
       }

       case 12:  // corba/RisikoServer/shutdown
       {
         this.shutdown ();
         out = $rh.createReply();
         break;
       }

       case 13:  // corba/RisikoServer/getPartitaInfo
       {
         int id = in.read_ulong ();
         corba.PartitaInfo $result = null;
         $result = this.getPartitaInfo (id);
         out = $rh.createReply();
         corba.PartitaInfoHelper.write (out, $result);
         break;
       }

       case 14:  // corba/RisikoServer/getActiveGame
       {
         String username = in.read_wstring ();
         corba.PartitaInfo $result = null;
         $result = this.getActiveGame (username);
         out = $rh.createReply();
         corba.PartitaInfoHelper.write (out, $result);
         break;
       }

       case 15:  // corba/RisikoServer/notifyNewManager
       {
         corba.PartitaInfo partita = corba.PartitaInfoHelper.read (in);
         String manager = in.read_wstring ();
         this.notifyNewManager (partita, manager);
         out = $rh.createReply();
         break;
       }

       case 16:  // corba/RisikoServer/createUser
       {
         corba.UserDetails details = corba.UserDetailsHelper.read (in);
         boolean $result = false;
         $result = this.createUser (details);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 17:  // corba/RisikoServer/checkUsername
       {
         String username = in.read_wstring ();
         boolean $result = false;
         $result = this.checkUsername (username);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 18:  // corba/RisikoServer/activateUser
       {
         String username = in.read_wstring ();
         int codice = in.read_ulong ();
         boolean $result = false;
         $result = this.activateUser (username, codice);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 19:  // corba/RisikoServer/sendEmailForPassword
       {
         corba.UserInfo user = corba.UserInfoHelper.read (in);
         boolean $result = false;
         $result = this.sendEmailForPassword (user);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 20:  // corba/RisikoServer/getStatistics
       {
         String username = in.read_wstring ();
         corba.SummaryPlayerInfo $result = null;
         $result = this.getStatistics (username);
         out = $rh.createReply();
         corba.SummaryPlayerInfoHelper.write (out, $result);
         break;
       }

       case 21:  // corba/RisikoServer/getCompleteStatistics
       {
         corba.Summary $result[] = null;
         $result = this.getCompleteStatistics ();
         out = $rh.createReply();
         corba.StatisticsHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:corba/RisikoServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public RisikoServer _this() 
  {
    return RisikoServerHelper.narrow(
    super._this_object());
  }

  public RisikoServer _this(org.omg.CORBA.ORB orb) 
  {
    return RisikoServerHelper.narrow(
    super._this_object(orb));
  }


} // class RisikoServerPOA
